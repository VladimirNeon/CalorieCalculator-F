{"ast":null,"code":"const BASE_URL = \"http://localhost:8080\";\n\n// Отримати токен із localStorage\nconst getToken = () => localStorage.getItem(\"token\");\n\n// Функція для запитів із токеном\nconst apiFetch = async (endpoint, options = {}) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    ...options.headers,\n    ...(getToken() && {\n      Authorization: `Bearer ${getToken()}`\n    }) // Додаємо токен в заголовок\n  };\n  const response = await fetch(`${BASE_URL}${endpoint}`, {\n    ...options,\n    headers\n  });\n\n  // Якщо сервер повертає помилку 401 (неавторизовано), перенаправляємо на сторінку входу\n  if (response.status === 401) {\n    window.location.href = \"/login\";\n    return; // Зупиняємо подальшу обробку\n  }\n  if (!response.ok) {\n    const errorData = await response.json(); // Декодуємо помилку, якщо можливо\n    throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// API-запити\n\n// Інгредієнти\nexport const fetchIngredients = async () => apiFetch(\"/ingredients\");\nexport const addIngredient = async ingredient => apiFetch(\"/ingredients\", {\n  method: \"POST\",\n  body: JSON.stringify(ingredient)\n});\nexport const deleteIngredient = async id => apiFetch(`/ingredients/${id}`, {\n  method: \"DELETE\"\n});\n\n// Страви\nexport const fetchDishes = async () => apiFetch(\"/dishes\");\nexport const addDish = async dish => apiFetch(\"/dishes\", {\n  method: \"POST\",\n  body: JSON.stringify(dish)\n});\nexport const deleteDish = async id => apiFetch(`/dishes/${id}`, {\n  method: \"DELETE\"\n});\n\n// Меню\nexport const fetchMenus = async () => apiFetch(\"/menus\");\nexport const addMenu = async menu => apiFetch(\"/menus\", {\n  method: \"POST\",\n  body: JSON.stringify(menu)\n});\nexport const deleteMenu = async id => apiFetch(`/menus/${id}`, {\n  method: \"DELETE\"\n});\n\n// Клієнти\nexport const fetchClients = async () => apiFetch(\"/clients\");\nexport const addClient = async client => apiFetch(\"/clients\", {\n  method: \"POST\",\n  body: JSON.stringify(client)\n});\nexport const deleteClient = async id => apiFetch(`/clients/${id}`, {\n  method: \"DELETE\"\n});\nexport const findMenuForClient = async clientId => apiFetch(`/menus/closest/${clientId}`);","map":{"version":3,"names":["BASE_URL","getToken","localStorage","getItem","apiFetch","endpoint","options","headers","Authorization","response","fetch","status","window","location","href","ok","errorData","json","Error","message","fetchIngredients","addIngredient","ingredient","method","body","JSON","stringify","deleteIngredient","id","fetchDishes","addDish","dish","deleteDish","fetchMenus","addMenu","menu","deleteMenu","fetchClients","addClient","client","deleteClient","findMenuForClient","clientId"],"sources":["C:/Users/Boss/Desktop/second/src/main/resources/src/api/api.js"],"sourcesContent":["const BASE_URL = \"http://localhost:8080\";\r\n\r\n// Отримати токен із localStorage\r\nconst getToken = () => localStorage.getItem(\"token\");\r\n\r\n// Функція для запитів із токеном\r\nconst apiFetch = async (endpoint, options = {}) => {\r\n    const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers,\r\n        ...(getToken() && { Authorization: `Bearer ${getToken()}` }), // Додаємо токен в заголовок\r\n    };\r\n\r\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n        ...options,\r\n        headers,\r\n    });\r\n\r\n    // Якщо сервер повертає помилку 401 (неавторизовано), перенаправляємо на сторінку входу\r\n    if (response.status === 401) {\r\n        window.location.href = \"/login\";\r\n        return; // Зупиняємо подальшу обробку\r\n    }\r\n\r\n    if (!response.ok) {\r\n        const errorData = await response.json(); // Декодуємо помилку, якщо можливо\r\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n};\r\n\r\n// API-запити\r\n\r\n// Інгредієнти\r\nexport const fetchIngredients = async () => apiFetch(\"/ingredients\");\r\nexport const addIngredient = async (ingredient) =>\r\n    apiFetch(\"/ingredients\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(ingredient),\r\n    });\r\nexport const deleteIngredient = async (id) =>\r\n    apiFetch(`/ingredients/${id}`, { method: \"DELETE\" });\r\n\r\n// Страви\r\nexport const fetchDishes = async () => apiFetch(\"/dishes\");\r\nexport const addDish = async (dish) =>\r\n    apiFetch(\"/dishes\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(dish),\r\n    });\r\nexport const deleteDish = async (id) =>\r\n    apiFetch(`/dishes/${id}`, { method: \"DELETE\" });\r\n\r\n// Меню\r\nexport const fetchMenus = async () => apiFetch(\"/menus\");\r\nexport const addMenu = async (menu) =>\r\n    apiFetch(\"/menus\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(menu),\r\n    });\r\nexport const deleteMenu = async (id) =>\r\n    apiFetch(`/menus/${id}`, { method: \"DELETE\" });\r\n\r\n// Клієнти\r\nexport const fetchClients = async () => apiFetch(\"/clients\");\r\nexport const addClient = async (client) =>\r\n    apiFetch(\"/clients\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(client),\r\n    });\r\nexport const deleteClient = async (id) =>\r\n    apiFetch(`/clients/${id}`, { method: \"DELETE\" });\r\nexport const findMenuForClient = async (clientId) =>\r\n    apiFetch(`/menus/closest/${clientId}`);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}